import axios from "axios";

// Base URL for the API
const apiUrl = "http://localhost:8000";

// Authorization headers (if required)
const Authorization = localStorage.getItem("token");
const Bearer = localStorage.getItem("token_type");

const requestOptions = {
  headers: {
    "Content-Type": "application/json",
    Authorization: `${Bearer} ${Authorization}`,
  },
};

// Data structure for a ticket
export interface Ticket {
  id?: number; // Optional for POST (auto-generated by the database)
  owner_name: string;
  phone: string;
  code_id: number;
  tpackage_id: number;
  order_id: number;
}

// Fetch all tickets (GET /tickets)
export async function getTickets() {
  try {
    const response = await axios.get(`${apiUrl}/tickets`, requestOptions);
    return response.data; // Return the list of tickets
  } catch (error) {
    console.error("Error fetching tickets:", error);
    throw error;
  }
}

export const getTicketsL = async (): Promise<Ticket[]> => {
  const response = await fetch("/api/tickets"); // Adjust API endpoint
  if (!response.ok) {
    throw new Error("Failed to fetch tickets");
  }
  return response.json(); // Ensure the JSON response matches the `Ticket[]` structure
};

// Fetch a specific ticket by ID (GET /tickets/:id)
export async function getTicketById(id: string | number) {
    try {
      const response = await axios.get(`${apiUrl}/tickets/${id}`, requestOptions);
      return response.data; // Return the ticket details
    } catch (error) {
      console.error("Error fetching ticket by ID:", error);
      throw error;
    }
  }

// Create a new ticket (POST /tickets)
export async function createTicket(ticket: Ticket) {
  try {
    const response = await axios.post(`${apiUrl}/tickets`, ticket, requestOptions);
    return response.data; // Return the newly created ticket
  } catch (error) {
    console.error("Error creating ticket:", error);
    throw error;
  }
}

// Update an existing ticket (PUT /tickets/:id)
export async function updateTicket(id: string | number, ticket: Ticket) {
    try {
      const response = await axios.put(
        `${apiUrl}/tickets/${id}`,
        ticket,
        requestOptions
      );
      return response.data; // Return the updated ticket
    } catch (error) {
      console.error("Error updating ticket:", error);
      throw error;
    }
  }

// Delete a ticket by ID (DELETE /tickets/:id)
export async function deleteTicket(id: string | number) {
    try {
      const response = await axios.delete(`${apiUrl}/tickets/${id}`, requestOptions);
      return response.data; // Return the result of the deletion
    } catch (error) {
      console.error("Error deleting ticket:", error);
      throw error;
    }
  }
